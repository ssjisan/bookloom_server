import Category from "../model/categoryModel.js";

export const createCategory = async (req, res) => {
    try {
      const { name, status } = req.body;
      const userId = req.user._id; // Assuming req.user contains the logged-in user's data
  
      // Validate input fields
      if (!name.trim()) {
        return res.status(400).json({ error: "Category name is required" });
      }
  
      // Ensure the category name is unique
      const existingCategory = await Category.findOne({ name });
      if (existingCategory) {
        return res.status(400).json({ error: "Category name must be unique" });
      }
  
      // Create a new category with the generated categoryID and author ID
      const newCategory = new Category({
        name,
        categoryID: req.categoryID, // categoryID generated by the middleware
        author: userId, // Author ID from the logged-in user
        status: status || "active", // Default to "active" if status is not provided
      });
  
      // Save the new category to the database
      await newCategory.save();
  
      // Return the newly created category in the response
      res.status(201).json(newCategory);
    } catch (error) {
      console.error("Error creating category:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };

  export const listOfCategories = async (req, res) => {
    try {
      const categories = await Category.find().populate("author", "name email");
      res.json(categories);
    } catch (error) {
      console.error("Error fetching category:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };
  
  export const removeCategory = async (req, res) => {
    try {
      const { categoryID } = req.params;
  
      const category = await Category.findByIdAndDelete(categoryID);
  
      if (!category) {
        return res.status(404).json({ error: "Category not found" });
      }
  
      res.json({ message: "Category deleted successfully" });
    } catch (error) {
      console.error("Error deleting Category:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };

  export const readCategory = async (req, res) => {
    try {
      const { categoryID } = req.params;
      const category = await Category.findById(categoryID).populate(
        "author",
        "name email"
      );
  
      if (!category) {
        return res.status(404).json({ error: "Category not found" });
      }
  
      res.json(category);
    } catch (error) {
      console.error("Error fetching category:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };

  export const updateCategory = async (req, res) => {
    try {
      const { categoryID } = req.params;
      const { name, status } = req.body;
      const userId = req.user._id; // Assuming req.user contains the logged-in user's data
  
      // Validate input fields
      if (!name.trim()) {
        return res.status(400).json({ error: "Category name is required" });
      }
  
      // Find the category by ID
      const category = await Category.findById(categoryID);
  
      if (!category) {
        return res.status(404).json({ error: "Category not found" });
      }
  
      // Ensure the category name is unique, except for the current category
      const existingCategory = await Category.findOne({ name, _id: { $ne: categoryID } });
      if (existingCategory) {
        return res.status(400).json({ error: "Category name must be unique" });
      }
  
      // Update the category fields
      category.name = name;
      category.status = status || category.status; // Retain current status if not provided
      category.author = userId; // Update the author to the current user
  
      // Save the updated category to the database
      const updatedCategory = await category.save();
  
      // Return the updated category in the response
      res.json(updatedCategory);
    } catch (error) {
      console.error("Error updating category:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };